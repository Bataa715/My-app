// lib/firebase.ts
import { initializeApp, type FirebaseApp } from 'firebase/app';
import { getAuth, type Auth } from 'firebase/auth';
import { getAnalytics, isSupported, type Analytics } from 'firebase/analytics';
import { getFirestore, type Firestore } from "firebase/firestore";
import {
  getMessaging,
  getToken,
  onMessage,
  type Messaging
} from 'firebase/messaging';

const firebaseConfig = {
  apiKey: "AIzaSyASai6a1N3BVpG8n6CMzssFQbxdzzRhdPc",
  authDomain: "setgelzuin-app.firebaseapp.com",
  projectId: "setgelzuin-app",
  storageBucket: "setgelzuin-app.firebasestorage.app",
  messagingSenderId: "397784045864",
  appId: "1:397784045864:web:dd035abe90938e4725581d",
  measurementId: "G-GNT80QXXF4"
};

// Initialize Firebase
const app: FirebaseApp = initializeApp(firebaseConfig);

// Initialize services
const auth: Auth = getAuth(app);
const db: Firestore = getFirestore(app);

// Optional: Analytics
let analytics: Analytics | undefined;
isSupported().then((supported) => {
  if (supported) {
    analytics = getAnalytics(app);
  }
});

// Messaging
let messagingInstance: Messaging | null = null;
if (typeof window !== 'undefined' && 'Notification' in window && 'serviceWorker' in navigator) {
  try {
    messagingInstance = getMessaging(app);
  } catch (err) {
    console.error('Failed to initialize Firebase Messaging:', err);
  }
}

// ‚úÖ FCM Token –∞–≤–∞—Ö —Ñ—É–Ω–∫—Ü
export const requestForToken = async (): Promise<string | null> => {
  if (!messagingInstance) {
    console.warn('Firebase Messaging is not initialized.');
    return null;
  }

  // =====================================================================================
  // !!! –ß–£–•–ê–õ: –≠–ù–≠ –•–≠–°–≠–ì–¢ ”®”®–†–ò–ô–ù FIREBASE –¢”®–°–õ–ò–ô–ù –ñ–ò–ù–•–≠–ù–≠ VAPID KEY-–ì –û–†–£–£–õ–ù–ê –£–£ !!!
  // Firebase Console > Project Settings > Cloud Messaging —Ç–∞–± > Web Push certificates —Ö—ç—Å—ç–≥—Ç "Key pair" –≥—ç—Å—ç–Ω —É—Ç–≥—ã–≥ —Ö—É—É–ª–∂ –∞–≤–Ω–∞.
  // =====================================================================================
  const vapidKeyFromServer = "TH8etw_bcQc_GGSMbcUUrgPNXHjylTtSSJmVi_J2SSU"; // <-- ”®–ú–ù”®–• –£–¢–ì–ê–ê–† “Æ–õ–î–≠–≠–õ–≠–≠. –®–ê–õ–ì–ê–ê–†–ê–ô!

  // –•—ç—Ä—ç–≤ VAPID key-–≥ –æ–≥—Ç –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–æ–ª –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞ –≥–∞—Ä–≥–∞–Ω–∞.
  // –≠–Ω—ç —Ö—ç—Å–≥–∏–π–≥ —Ö—ç–≤—ç—ç—Ä “Ø–ª–¥—ç—ç—Ö —ç—Å–≤—ç–ª —É—Å—Ç–≥–∞–∂ –±–æ–ª–Ω–æ, —É—á–∏—Ä –Ω—å —Ç–∞ key-–≥—ç—ç –æ—Ä—É—É–ª—Å–∞–Ω.
  if (vapidKeyFromServer === "YOUR_GENERATED_VAPID_KEY_FROM_FIREBASE_CONSOLE_PLEASE_REPLACE") {
      console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      console.error("VAPID Key –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞! src/lib/firebase.ts —Ñ–∞–π–ª—ã–≥ –∑–∞—Å–Ω–∞ —É—É.");
      console.error("Firebase Console > Project Settings > Cloud Messaging > Web Push certificates -> Key pair");
      console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      return null;
  }
  
  console.log("Attempting to get FCM token with VAPID key:", vapidKeyFromServer); // Log the key being used

  try {
    const currentToken = await getToken(messagingInstance, {
      vapidKey: vapidKeyFromServer
    });

    if (currentToken) {
      console.log('‚úÖ FCM Token:', currentToken);
      return currentToken;
    } else {
      console.warn('üö´ –¢–æ–∫–µ–Ω –∞–≤–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞. Notification permission —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —ç—Å–≤—ç–ª VAPID key –±—É—Ä—É—É –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π.');
      return null;
    }
  } catch (err) {
    console.error('‚ùå FCM —Ç–æ–∫–µ–Ω –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', err);
    if (err instanceof Error && (err.name === 'InvalidAccessError' || err.message.includes("applicationServerKey is not valid"))) {
        console.error('‚ùóÔ∏è VAPID key –±—É—Ä—É—É –±–∞–π—Ö –º–∞–≥–∞–¥–ª–∞–ª—Ç–∞–π. Firebase Console-–æ–æ—Å –∞–≤—Å–∞–Ω Key pair-–≥ –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–Ω–∞ —É—É. –ê—à–∏–≥–ª–∞–∂ –±—É–π key:', vapidKeyFromServer);
    }
    return null;
  }
};

// ‚úÖ Foreground Notification —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö
export const onMessageListener = (): Promise<any> =>
  new Promise((resolve) => {
    if (!messagingInstance) {
      console.warn('Firebase Messaging is not initialized. Cannot listen for messages.');
      return resolve(null); 
    }
    onMessage(messagingInstance, (payload) => {
      console.log('üì© Foreground message received:', payload);
      resolve(payload);
    });
  });

export { app, auth, db, analytics, messagingInstance as messaging };
