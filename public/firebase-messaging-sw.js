
// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY FIREBASE-CLI
// firebase-messaging-sw.js

// Scripts for Firebase products are imported on demand from a CDN.
// See https://firebase.google.com/docs/web/setup#reduce-sdk-sizes
importScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-messaging-compat.js');

// Initialize the Firebase app in the service worker by passing in the
// messagingSenderId.
const firebaseConfig = {
  apiKey: "AIzaSyASai6a1N3BVpG8n6CMzssFQbxdzzRhdPc",
  authDomain: "setgelzuin-app.firebaseapp.com",
  projectId: "setgelzuin-app",
  storageBucket: "setgelzuin-app.firebasestorage.app",
  messagingSenderId: "397784045864", // Ensure this matches your Firebase project
  appId: "1:397784045864:web:dd035abe90938e4725581d",
  measurementId: "G-GNT80QXXF4"
};

firebase.initializeApp(firebaseConfig);

// Retrieve an instance of Firebase Messaging so that it can handle background
// messages.
const messaging = firebase.messaging();

messaging.onBackgroundMessage((payload) => {
  console.log(
    '[firebase-messaging-sw.js] Received background message ',
    payload,
  );
  // Customize notification here
  const notificationTitle = payload.notification?.title || 'New Notification';
  const notificationOptions = {
    body: payload.notification?.body || 'You have a new message.',
    icon: payload.notification?.icon || '/icons/icon-192x192.png', // Default icon
    image: payload.notification?.image, // Optional large image
    data: payload.data, // Pass along data for click handling
  };

  self.registration.showNotification(notificationTitle, notificationOptions).catch(err => {
    console.error("Error showing notification: ", err);
  });
});


self.addEventListener('notificationclick', (event) => {
  console.log('[firebase-messaging-sw.js] Notification click Received.', event.notification);

  event.notification.close();

  const notificationData = event.notification.data;
  let openUrl = '/'; // Default URL to open

  if (notificationData && notificationData.url) {
    openUrl = notificationData.url;
  } else if (notificationData && notificationData.FCM_MSG && notificationData.FCM_MSG.data && notificationData.FCM_MSG.data.link) {
    // Fallback for older payload structures or if data is nested
    openUrl = notificationData.FCM_MSG.data.link;
  } else if (event.notification.data && event.notification.data.link) {
      openUrl = event.notification.data.link;
  }


  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
      // Check if there's already a tab open with the target URL
      for (const client of clientList) {
        // Use a more robust check if the URL might have query params or hashes
        const clientNormalizedUrl = new URL(client.url).pathname;
        const openNormalizedUrl = new URL(openUrl, self.location.origin).pathname;

        if (clientNormalizedUrl === openNormalizedUrl && 'focus' in client) {
          return client.focus();
        }
      }
      // If no tab is open, open a new one
      if (clients.openWindow) {
        return clients.openWindow(openUrl);
      }
    }),
  );
});
